<?php

/**
 * @file
 * Implements the basic functionality required to create and display an entity.
 *
 * This example does not use the
 * @link http://drupal.org/project/entity Entity API module @endlink, which is
 * used by many entity implementations and is recommended by many.
 *
 * An example of use of creating and managing entities using the Entity API
 * module is provided in the
 * @link http://drupal.org/project/model Model Entity module @endlink.
 *
 * @todo: Reference the ronald_istos article series
 * @todo: Reference the Drupal module development book
 * @todo: Add a single field
 */

/**
 * @defgroup entity_example Example: Entity
 * @ingroup examples
 * @{
 * 利用核心API来创建一个实体。
 * 注意这里使用的不是 http://drupal.org/project/entity 的Entity API模块，
 */

/**
 * Implements hook_entity_info().
 *
 * 实体的基础描述部分。
 * 这里实现了一个实体，这个实体带有一个Bundle，并且没有版本支持。
 */
function entity_example_entity_info() {
  $info['entity_example_basic'] = array(
    // 用于识别实体的一个可读名称
    'label' => t('Example Basic Entity'),

    //实体的控制器，从Drupal核心控制器扩展而来。
    'controller class' => 'EntityExampleBasicController',

    //在hook_schema()中定义的实体的数据表。
    'base table' => 'entity_example_basic',

    //返回实体的URI元素
    'uri callback' => 'entity_example_basic_uri',

    //如果 fieldable == FALSE就不能够附加Field了。
    'fieldable' => TRUE,

    // entity_keys通知控制器，用哪个数据库字段作为主键。
    // 如果这里没有Bundle或者版本支持，那么这个操作就不是必要的。
    // 这里我们不支持版本，这个部分被省略了。
    'entity keys' => array(
      // 'id' (basic_id) 是唯一ID.
      'id' => 'basic_id' ,
      // 用bundle_type字段判断Bundle类型
      'bundle' => 'bundle_type',
    ),
    'bundle keys' => array(
      'bundle' => 'bundle_type',
    ),

    // FALSE会禁止缓存，缓存功能由Drupal核心处理。
    'static cache' => TRUE,

    // Bundle是基于一个基础实体的，可变的一组字段或者配置。
    'bundles' => array(
      'first_example_bundle' => array(
        'label' => t('First example bundle'),
        // 'admin' 用于Field界面，提供Field和显示页面
        'admin' => array(
          'path' => 'admin/structure/entity_example_basic/manage',
          'access arguments' => array('administer entity_example_basic entities'),
        ),
      ),
    ),

    // 视图类型让实体能够根据不同上下文进行不同的展示。
    // TODO:Tweaky??
    // 出于演示目的，我们提供"Tweaky"，但是我们还可以提供多种显示类型。
    'view modes' => array(
      'tweaky' => array(
        'label' => t('Tweaky'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $info;
}

/**
 * 获取一个基本对象
 *
 * 这个函数处于菜单系统和 entity_example_basic_load_multiple()之间（就是说，被菜单系统
 * 调用，调用entity_example_basic_load_multiple()）。
 *
 * 这个函数的名字，由菜单中带有的通配符转换而来。例如/path/%wildcard会调用
 * wildcard_load([通配符值])。
 * 在我们的例子中定义了路径：
 *  examples/entity_example/basic/%entity_example_basic
 * 在hook_menu中Drupal会调用entity_example_basic_load()。
 *
 * @param int $basic_id
 *   整数，实体ID
 * @param bool $reset
 *   布尔值，是否复位内部缓存。
 *
 * @return object
 *   一个完全载入的对象，如果载入失败，返回FALSE
 *
 * @see entity_example_basic_load_multiple()
 * @see entity_example_menu()
 */
function entity_example_basic_load($basic_id = NULL, $reset = FALSE) {
  $basic_ids = (isset($basic_id) ? array($basic_id) : array());
  $basic = entity_example_basic_load_multiple($basic_ids, array(), $reset);
  return $basic ? reset($basic) : FALSE;
}

/**
 * 载入多个基础实体。
 *
 * 我们只需要把请求发给entity_load()，他会调用实体控制器类的load()方法。
 *
 */
function entity_example_basic_load_multiple($basic_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('entity_example_basic', $basic_ids, $conditions, $reset);
}

/**
 * Implements the uri callback.
 */
function entity_example_basic_uri($basic) {
  return array(
    'path' => 'examples/entity_example/basic/' . $basic->basic_id,
  );
}

/**
 * Implements hook_menu().
 */
function entity_example_menu() {
  $items['examples/entity_example'] = array(
    'title' => t('Entity Example'),
    'page callback' => 'entity_example_info_page',
    'access arguments' => array('view any entity_example_basic entity'),
  );

  // 这里给Field API提供了加载界面的机会。
  //这里的定义必须和上面的basic_entity_info()中的admin部分相吻合。
  $items['admin/structure/entity_example_basic/manage'] = array(
    'title' => t('Administer entity_example_basic entity type'),
    'page callback' => 'entity_example_basic_list_entities',
    'access arguments' => array('administer entity_example_basic entities'),
  );

  // 添加示例实体
  $items['admin/structure/entity_example_basic/manage/add'] = array(
    'title' => t('Add an Entity Example Basic Entity'),
    'page callback' => 'entity_example_basic_add',
    'access arguments' => array('create entity_example_basic entities'),
    'type' => MENU_LOCAL_ACTION,
  );

  // 列出所有的entity_example_basic实体
  $items['admin/structure/entity_example_basic/manage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // 查看实体的页面 - 需要遵循basic_uri中的定义，会使用load_basic来获取必要的实体信息。
  $items['examples/entity_example/basic/%entity_example_basic'] = array(
    'title callback' => 'entity_example_basic_title',
    'title arguments' => array(3),
    'page callback' => 'entity_example_basic_view',
    'page arguments' => array(3),
    'access arguments' => array('view any entity_example_basic entity'),
  );

  // 单独实体页面上的'View' tab
  $items['examples/entity_example/basic/%entity_example_basic/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // 单独实体页面上的'Edit' tab
  $items['examples/entity_example/basic/%entity_example_basic/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_example_basic_form', 3),
    'access arguments' => array('edit any entity_example_basic entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // 添加示例实体
  $items['examples/entity_example/basic/add'] = array(
    'title' => t('Add an Entity Example Basic Entity'),
    'page callback' => 'entity_example_basic_add',
    'access arguments' => array('create entity_example_basic entities'),
  );

  return $items;
}

/**
 * 页面基础信息
 */
function entity_example_info_page() {
  $content['preface'] = array(
    '#type' => 'item',
    '#markup' => t('The entity example provides a simple example entity.'),
  );
  if (user_access('administer entity_example_basic entities')) {
    $content['preface']['#markup'] = t('You can administer these and add fields and change the view !link.',
      array('!link' => l(t('here'), 'admin/structure/entity_example_basic/manage'))
    );
  }
  $content['table'] = entity_example_basic_list_entities();

  return $content;
}

/**
 * Implements hook_permission().
 */
function entity_example_permission() {
  $permissions = array(
    'administer entity_example_basic entities' => array(
      'title' => t('Administer entity_example_basic entities'),
    ),
    'view any entity_example_basic entity' => array(
      'title' => t('View any Entity Example Basic entity'),
    ),
    'edit any entity_example_basic entity' => array(
      'title' => t('Edit any Entity Example Basic entity'),
    ),
    'create entity_example_basic entities' => array(
      'title' => t('Create Entity Example Basic Entities'),
    ),
  );
  return $permissions;
}

/**
 * 返回一个包含所有entity_example_basic类型实体的渲染数组。
 *
 * 这只是哥基本的例子，所以不会做很多的实体。
 * 所以我们只要简单的全部载入即可。
 * 在pager_example.module中示范了如何编写分页器。
 * 多数的实现可能会用Entity API模块、或者用Views模块来实现。
 * 不过这里我们尽量避免使用非核心特性。
 *
 * @see pager_example.module
 */
function entity_example_basic_list_entities() {
  $content = array();
  // 载入所有的实体。
  $entities = entity_example_basic_load_multiple();
  if (!empty($entities)) {
    foreach ($entities as $entity) {
      // 每个实体一行
      $rows[] = array(
        'data' => array(
          'id' => $entity->basic_id,
          'item_description' => l($entity->item_description, 'examples/entity_example/basic/' . $entity->basic_id),
          'bundle' => $entity->bundle_type,
        ),
      );
    }
    // 把实体放入表格中渲染，参考theme_table()。
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('Item Description'), t('Bundle')),
    );
  }
  else {
    // 如果没有实体，需要告知用户。
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No entity_example_basic entities currently exist.'),
    );
  }
  return $content;
}

/**
 * 当展示实体时，该回调会产生一个页面标题。
 */
function entity_example_basic_title($entity) {
  return t('Entity Example Basic (item_description=@item_description)', array('@item_description' => $entity->item_description));
}

/**
 * 用于显示一个实体的菜单回调。
 *
 * 当载入一个实体用于显示时，实际上会按顺序调用一系列的钩子
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 * @param $entity
 * @param string $view_mode
 * @return
 */
function entity_example_basic_view($entity, $view_mode = 'tweaky') {
  // 我们的实体类型
  $entity_type = 'entity_example_basic';
  // 开始设置内容
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  // 创建Field内容——这里是Field API真正参与的位置。
  // 这里只用了很少的代码，因为绝大多数任务都由Field模块完成了。
  // field_attach_prepare_view() 让Field在显示之前进行数据的载入。
  field_attach_prepare_view($entity_type, array($entity->basic_id => $entity),
    $view_mode);

  // 这里我们调用了entity_prepare_view()，借此来触发hook_entity_prepare_view()
  entity_prepare_view($entity_type, array($entity->basic_id => $entity));
  // 接下来，field_attach_view()生成了这个Field的内容
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API 完成任务了, 接下来我们生成一些其他数据。
  $entity->content['created'] = array(
    '#type' => 'item',
    '#title' => t('Created date'),
    '#markup' => format_date($entity->created),
  );
  $entity->content['item_description'] = array(
    '#type' => 'item',
    '#title' => t('Item Description'),
    '#markup' => $entity->item_description,
  );


  // 接下来调用一些钩子。我们需要提供给hook_entity_view()一个语言代码，所以需要进行获取：
  global $language;
  $langcode = $language->language;
  // 调用 hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // 调用 hook_entity_view_alter().
  drupal_alter(array('entity_example_basic_view', 'entity_view'),
    $entity->content, $entity_type);

  // 最后，返回内容。
  return $entity->content;
}

/**
 * Implements hook_field_extra_fields().
 *
 * 这个钩子用于把"特别字段"（比如把属性配置得好像字段一样）作为伪字段暴露出来。
 * 这样这（伪字段）就可以被实体以及字段核心功能所处理了。
 * Node的Title字段就是使用这样的方式来处理的。
 */
function entity_example_field_extra_fields() {
  $form_elements['item_description'] = array(
    'label' => t('Item Description'),
    'description' => t('Item Description (an extra form field)'),
    'weight' => -5,
  );
  $display_elements['created'] = array(
    'label' => t('Creation date'),
    'description' => t('Creation date (an extra display field)'),
    'weight' => 0,
  );
  $display_elements['item_description'] = array(
    'label' => t('Item Description'),
    'description' => t('Just like title, but trying to point out that it is a separate property'),
    'weight' => 0,
  );


  // 我们制作了一种Bundle，所以我们在这里只为这唯一的Bundle类型提供额外的字段支持
  $extra_fields['entity_example_basic']['first_example_bundle']['form'] = $form_elements;
  $extra_fields['entity_example_basic']['first_example_bundle']['display'] = $display_elements;

  return $extra_fields;
}

/**
 * 为新增实体的编辑窗体提供一个包装
 */
function entity_example_basic_add() {
  // 创建一个基础的实体结构，传递给验证和提交过程。
  $entity = entity_get_controller('entity_example_basic')->create();
  return drupal_get_form('entity_example_basic_form', $entity);
}

/**
 * 用于创建entity_example_basic实体的Form函数
 * - 为实体数据设置Form：也就是数据表的各个列。
 * - 调用Field API，把实体上附着的字段引入到Form中来。
 */
function entity_example_basic_form($form, &$form_state, $entity) {
  $form['item_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Item Description'),
    '#required' => TRUE,
    '#default_value' => $entity->item_description,
  );

  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  field_attach_form('entity_example_basic', $entity, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('entity_example_basic_edit_delete'),
    '#weight' => 200,
  );

  return $form;
}


/**
 * entity_example_basic_add_form的验证函数。
 * 我们直接调用Field API来处理附着字段的验证过程。
 */
function entity_example_basic_form_validate($form, &$form_state) {
  field_attach_form_validate('entity_example_basic', $form_state['values']['basic_entity'], $form, $form_state);
}


/**
 * Form提交处理：提交basic_add_form的信息。
 */
function entity_example_basic_form_submit($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  $entity->item_description = $form_state['values']['item_description'];
  field_attach_submit('entity_example_basic', $entity, $form, $form_state);
  $entity = entity_example_basic_save($entity);
  $form_state['redirect'] = 'examples/entity_example/basic/' . $entity->basic_id;
}

/**
 * 删除的处理
 *
 * @todo: 'Are you sure?' message.
 */
function entity_example_basic_edit_delete($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  entity_example_basic_delete($entity);
  drupal_set_message(t('The entity %item_description (ID %id) has been deleted',
    array('%item_description' => $entity->item_description, '%id' => $entity->basic_id))
  );
  $form_state['redirect'] = 'examples/entity_example';
}

/**
 * 调用控制器来保存实体内容。
 */
function entity_example_basic_save(&$entity) {
  return entity_get_controller('entity_example_basic')->save($entity);
}

/**
 * 调用控制器删除实体。
 */
function entity_example_basic_delete($entity) {
  entity_get_controller('entity_example_basic')->delete($entity);
}

/**
 * EntityExampleBasicControllerInterface 定义。
 *
 * 因为任何人都可以使用hook_entity_info_alter()来改变我们的控制类，所以我们创建一个接口。
 * 我们需要让后来者得知，我们的类需要什么样的方法才能正常运行。
 *
 * @see hook_entity_info_alter()
 */
interface EntityExampleBasicControllerInterface
  extends DrupalEntityControllerInterface {

  /**
   * 创建一个实体。
   */
  public function create();

  /**
   * 保存一个实体。
   *
   * @param object $entity
   *   要进行保存的实体。
   */
  public function save($entity);

  /**
   * 删除一个实体。
   *
   * @param object $entity
   *   要删除的实体。
   */
  public function delete($entity);

}

/**
 * EntityExampleBasicController extends DrupalDefaultEntityController.
 *
 * DrupalDefaultEntityController的派生类，用来扩展create, update以及delete方法。
 */
class EntityExampleBasicController
  extends DrupalDefaultEntityController
  implements EntityExampleBasicControllerInterface {

  /**
   * 创建并返回一个新的entity_example_basic实体。
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'entity_example_basic';
    $entity->basic_id = 0;
    $entity->bundle_type = 'first_example_bundle';
    $entity->item_description = '';
    return $entity;
  }

  /**
   * 使用drupal_write_record()保存字段。
   * @param object $entity
   * @return object
   */
  public function save($entity) {

    // 如果实体没有basic_id，那么我们用创建时间对其赋值。
    if (empty($entity->basic_id)) {
      $entity->created = time();
    }
    // 调用 hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'entity_example_basic');
    // 'primary_keys' 参数决定了当前操作是插入还是更新。所以如果实体已经有了ID的话，我们
    // 就会把basic_id作为primary_keys传递给drupal_write_record。
    $primary_keys = $entity->basic_id ? 'basic_id' : array();
    // 写入实体数据。
    drupal_write_record('entity_example_basic', $entity, $primary_keys);
    // 接下来根据实体是更新还是新建，来决定调用hook_entity_update()还是
    // hook_entity_insert()。我们只是保存函数的名字。
    $invocation = 'entity_insert';

    // 接下来我们需要对粘附到实体上的字段进行插入或者更新。我们试用了同样的primary_keys
    // 逻辑来判断是插入还是更新，以及调用何种后续钩子。
    if (empty($primary_keys)) {
      field_attach_insert('entity_example_basic', $entity);
    }
    else {
      field_attach_update('entity_example_basic', $entity);
      $invocation = 'entity_update';
    }
    // 调用 hook_entity_update() 或者 hook_entity_insert().
    module_invoke_all($invocation, $entity, 'entity_example_basic');
    return $entity;
  }

  /**
   * 删除单个实体。
   *
   * 实际上只是个deleteMultiple()的调用。
   */
  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

  /**
   * 删除一个或者多个entity_example_basic实体。

   * 很不幸，删除操作不被DrupalDefaultEntityController类支持。
   *
   * @param array $entities
   *   一个实体ID列表或者一个单独的数字ID。
   * @throws \Exception
   */
  public function deleteMultiple($entities) {
    $basic_ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'entity_example_basic');
          field_attach_delete('entity_example_basic', $entity);
          $basic_ids[] = $entity->basic_id;
        }
        db_delete('entity_example_basic')
          ->condition('basic_id', $basic_ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('entity_example', $e);
        throw $e;
      }
    }
  }
}

/**
 * @} End of "defgroup entity_example".
 */
