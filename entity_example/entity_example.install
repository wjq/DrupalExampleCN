<?php
/**
 * @file
 * Install for a basic entity - need to create the base table for our entity.
 * This table can have as many columns as you need to keep track of
 * entity-specific data that will not be added via attached fields.
 * The minimum information for the entity to work is an id and an entity name.
 */

/**
 * Implements hook_schema().
 *
 * @ingroup entity_example
 */
function entity_example_schema() {
  $schema = array();
  // 表名称可以很随意，不过推荐使用模块名称作为前缀，便于使用。
  $schema['entity_example_basic'] = array(
    'description' => 'The base table for our basic entity.',
    'fields' => array(
      'basic_id' => array(
        'description' => 'Primary key of the basic entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      // 如果允许多种Bundle，那么表结构必须有这个能力。
      // 我们把字段命名为'bundle_type'，避免跟实体类型混淆。

      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      // 附加属性对所有实体都一样，不需要Field存储。
      'item_description' => array(
        'description' => 'A description of the item',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp of the entity creation time.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('basic_id'),
  );

  return $schema;
}


/**
 * Implements hook_uninstall().
 *
 * 在删除时，我们会通知field.module，实体已经被删除，需要清理附着其上的Field
 *
 * @ingroup entity_example
 */
function entity_example_uninstall() {
  field_attach_delete_bundle('entity_example_basic', 'first_example_bundle');
}
