<?php

/**
 * @file
 * Tests for entity_example module.
 *
 * Verify example module functionality.
 */

/**
 * Entity实例模块的功能测试。
 *
 * @ingroup entity_example
 */
class EntityExampleTestCase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Entity example'),
      'description' => t('Basic entity example tests'),
      'group' => 'Examples',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // 启用模块。
    parent::setUp('entity_example');

    // 创建有权限的用户并登录。
    $permissions = array(
      'access content',
      'view any entity_example_basic entity',
      'edit any entity_example_basic entity',
      'create entity_example_basic entities',
      'administer entity_example_basic entities',
      'administer site configuration',
    );
    $account = $this->drupalCreateUser($permissions);
    $this->drupalLogin($account);

    // Attach a field.
    $field = array(
      'field_name' => 'entity_example_test_text' ,
      'type' => 'text',
    );
    field_create_field($field);
    $instance = array(
      'label' => 'Subject',
      'field_name' => 'entity_example_test_text',
      'entity_type' => 'entity_example_basic',
      'bundle' => 'first_example_bundle',
    );
    field_create_instance($instance);
  }

  /**
   * 测试实体Example模块的特性
   *
   * - 增删改查
   * - 表格显示
   * - 访问控制
   * - 字段管理
   * - 显示管理
   */
  public function testEntityExampleBasic() {
    // 创建10个实体.
    for ($i = 1; $i <= 10; $i++) {
      $edit[$i]['item_description'] = $this->randomName();
      $edit[$i]['entity_example_test_text[und][0][value]'] = $this->randomName(32);

      $this->drupalPost('examples/entity_example/basic/add', $edit[$i], 'Save');
      $this->assertText('item_description=' . $edit[$i]['item_description']);

      $this->drupalGet('examples/entity_example/basic/' . $i);
      $this->assertText('item_description=' . $edit[$i]['item_description']);
      $this->assertText($edit[$i]['entity_example_test_text[und][0][value]']);
    }

    // 删除主键为5的实体.
    $this->drupalPost('examples/entity_example/basic/5/edit', $edit[5], 'Delete');
    $this->drupalGet('examples/entity_example/basic/5');
    $this->assertResponse(404, 'Deleted entity 5 no longer exists');
    unset($edit[5]);

    // 更新主键为2的实体，并进行验证。
    $edit[2] = array(
      'item_description' => 'updated entity 2 ',
      'entity_example_test_text[und][0][value]' => 'updated entity 2 test text',
    );
    $this->drupalPost('examples/entity_example/basic/2/edit', $edit[2], 'Save');
    $this->assertText('item_description=' . $edit[2]['item_description']);
    $this->assertText('updated entity 2 test text');

    // 查看实体列表页面，并验证剩下的实体是否存在，并确认删掉的主键为5的实体已经消失。
    $this->drupalGet('admin/structure/entity_example_basic/manage');
    foreach ($edit as $id => $item) {
      $this->assertRaw('examples/entity_example/basic/' . $id . '">' . $item['item_description'] . '</a>');
    }
    $this->assertNoRaw('examples/entity_example/basic/5">');

    // 利用Field UI添加一个字段，并检查其行为是否正确。
    $field_edit = array(
      'fields[_add_new_field][label]' => 'New junk field',
      'fields[_add_new_field][field_name]' => 'new_junk_field',
      'fields[_add_new_field][type]' => 'text',
      'fields[_add_new_field][widget_type]' => 'text_textfield',
    );
    $this->drupalPost('admin/structure/entity_example_basic/manage/fields', $field_edit, t('Save'));
    $this->drupalPost(NULL, array(), t('Save field settings'));
    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertResponse(200);

    // 验证我们是否能够编辑和查看这个带着字段的实体。
    $edit[10]['field_new_junk_field[und][0][value]'] = $this->randomName();
    $this->drupalPost('examples/entity_example/basic/10/edit', $edit[10], 'Save');
    $this->assertResponse(200);
    $this->assertText('item_description=' . $edit[10]['item_description']);
    $this->assertText($edit[10]['field_new_junk_field[und][0][value]'], 'Custom field updated successfully');

    // 创建并登录没有权限的用户。
    $account = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($account);
    $this->drupalGet('admin/structure/entity_example_basic/manage');
    $this->assertResponse(403);
    $this->drupalGet('examples/entity_example/basic/2');
    $this->assertResponse(403, 'User does not have permission to view entity');

    // 创建并登录一个能够查看但是不能编辑的用户。
    $account = $this->drupalCreateUser(array('access content', 'view any entity_example_basic entity'));
    $this->drupalLogin($account);
    $this->drupalGet('admin/structure/entity_example_basic/manage');
    $this->assertResponse(403, 'Denied access to admin manage page');
    $this->drupalGet('examples/entity_example/basic/2');
    $this->assertResponse(200, 'User has permission to view entity');
    $this->drupalGet('examples/entity_example/basic/2/edit');
    $this->assertResponse(403, 'User is denied edit privileges');

    // 创建并登录一个能查看，能编辑，但是不能管理的用户。
    $account = $this->drupalCreateUser(
      array(
        'access content',
        'view any entity_example_basic entity',
        'edit any entity_example_basic entity',
      )
    );
    $this->drupalLogin($account);
    $this->drupalGet('admin/structure/entity_example_basic/manage');
    $this->assertResponse(403, 'Denied access to admin manage page');
    $this->drupalGet('examples/entity_example/basic/2');
    $this->assertResponse(200, 'User has permission to view entity');
    $this->drupalGet('examples/entity_example/basic/2/edit');
    $this->assertResponse(200, 'User has edit privileges');
  }
}
